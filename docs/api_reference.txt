VoidRay Game Engine - API Reference
==================================

QUICK REFERENCE
===============

ENGINE SETUP
------------
voidray.configure(width, height, title, fps) - Configure engine settings
voidray.on_init(callback) - Register initialization function
voidray.on_update(callback) - Register update function (optional)
voidray.on_render(callback) - Register render function (optional)
voidray.start() - Start the game engine
voidray.stop() - Stop the game engine
voidray.get_engine() - Get the engine instance

SCENE MANAGEMENT
---------------
voidray.register_scene(name, scene) - Register a scene
voidray.set_scene(name_or_scene) - Set current scene

CORE CLASSES
============

Scene
-----
Base class for game scenes (levels, menus, etc.)

Methods:
- on_enter() - Called when scene becomes active
- on_exit() - Called when scene is deactivated
- update(delta_time) - Called every frame
- render(renderer) - Called every frame for rendering
- add_object(game_object) - Add object to scene
- remove_object(game_object) - Remove object from scene

Sprite
------
Base class for visual game objects.

Constructor:
- Sprite(name) - Create a sprite with given name

Methods:
- create_colored_rect(width, height, color) - Create colored rectangle
- create_colored_circle(radius, color) - Create colored circle
- update(delta_time) - Override for custom behavior
- add_component(component) - Add component (physics, collision)
- get_component(component_type) - Get component by type

Properties:
- transform.position - Vector2 position
- transform.rotation - Rotation in degrees
- transform.scale - Vector2 scale

Vector2
-------
2D vector for positions, velocities, etc.

Constructor:
- Vector2(x, y) - Create vector
- Vector2.zero() - Create zero vector (0, 0)

Methods:
- normalized() - Get unit vector
- magnitude() - Get vector length
- distance_to(other) - Distance to another vector

Operations:
- Add: vec1 + vec2
- Subtract: vec1 - vec2
- Multiply: vec * scalar
- Properties: .x, .y

INPUT SYSTEM
============

Getting Input Manager:
input_manager = voidray.get_engine().input_manager

Keyboard:
- is_key_pressed(key) - True while key is held
- is_key_just_pressed(key) - True for one frame when pressed
- is_key_just_released(key) - True for one frame when released

Keys (use with input functions):
Keys.LEFT, Keys.RIGHT, Keys.UP, Keys.DOWN
Keys.A, Keys.B, Keys.C... Keys.Z
Keys.SPACE, Keys.ENTER, Keys.ESCAPE
Keys.SHIFT, Keys.CTRL, Keys.ALT

Mouse:
- get_mouse_position() - Returns Vector2 of mouse position
- is_mouse_button_pressed(button) - True while button held
- is_mouse_button_just_pressed(button) - True for one frame

Mouse Buttons:
- voidray.MouseButtons.LEFT
- voidray.MouseButtons.RIGHT
- voidray.MouseButtons.MIDDLE

PHYSICS SYSTEM
==============

Rigidbody Component
------------------
Add physics to sprites.

Methods:
- set_mass(mass) - Set object mass
- set_velocity(vector2) - Set velocity
- add_force(vector2) - Add continuous force
- add_impulse(vector2) - Add instant force
- set_bounciness(value) - Set bounce amount (0-1)
- set_drag(value) - Set air resistance

Collision Components
-------------------
BoxCollider(width, height) - Rectangle collision
CircleCollider(radius) - Circle collision

Properties:
- on_collision - Callback function for collisions

Example collision callback:
```python
def on_collision_callback(self, other, collision_info):
    print(f"Collided with {other.game_object.name}")

sprite.collider.on_collision = sprite.on_collision_callback
```

COLORS
======
Access through voidray.graphics.renderer.Color:

Color.WHITE, Color.BLACK, Color.RED, Color.GREEN, Color.BLUE
Color.YELLOW, Color.CYAN, Color.MAGENTA, Color.GRAY, Color.LIGHT_GRAY

Or create custom: (red, green, blue) tuple (0-255)

COMPLETE EXAMPLE
===============

```python
import voidray
from voidray import Scene, Sprite, Vector2, Keys, BoxCollider, Rigidbody
from voidray.graphics.renderer import Color

class Player(Sprite):
    def __init__(self):
        super().__init__("Player")
        self.create_colored_rect(40, 40, Color.BLUE)

        # Add collision
        self.collider = BoxCollider(40, 40)
        self.add_component(self.collider)

        self.speed = 300

    def update(self, delta_time):
        super().update(delta_time)

        input_manager = voidray.get_engine().input_manager
        velocity = Vector2.zero()

        if input_manager.is_key_pressed(Keys.LEFT):
            velocity.x = -self.speed
        if input_manager.is_key_pressed(Keys.RIGHT):
            velocity.x = self.speed

        self.transform.position += velocity * delta_time

class Ball(Sprite):
    def __init__(self):
        super().__init__("Ball")
        self.create_colored_circle(20, Color.RED)

        # Add physics
        self.rigidbody = Rigidbody()
        self.rigidbody.set_mass(1.0)
        self.add_component(self.rigidbody)

        # Add collision
        self.collider = CircleCollider(20)
        self.add_component(self.collider)

class GameScene(Scene):
    def on_enter(self):
        super().on_enter()

        player = Player()
        player.transform.position = Vector2(400, 500)
        self.add_object(player)

        ball = Ball()
        ball.transform.position = Vector2(400, 100)
        self.add_object(ball)

def init_game():
    scene = GameScene()
    voidray.register_scene("game", scene)
    voidray.set_scene("game")

def main():
    voidray.configure(800, 600, "Physics Game", 60)
    voidray.on_init(init_game)
    voidray.start()

if __name__ == "__main__":
    main()
```

This creates a complete game with physics, collision, and player movement!