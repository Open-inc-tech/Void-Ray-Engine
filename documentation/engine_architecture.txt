VoidRay Game Engine - Engine Architecture
=========================================

This document explains the internal architecture and design decisions of the VoidRay engine, helping developers understand how the engine works and how to extend it effectively.

OVERVIEW
--------
VoidRay follows a component-based architecture with clear separation of concerns. The engine is designed to be:

- Lightweight and easy to understand
- Modular with loosely coupled systems
- Extensible through inheritance and composition
- Cross-platform compatible
- Performance-oriented for 2D games

CORE ARCHITECTURE
================

Engine Class (Core Controller)
-----------------------------
The Engine class serves as the central coordinator:

1. Initializes all subsystems
2. Manages the main game loop
3. Coordinates between systems
4. Handles window management
5. Provides timing and frame rate control

Key responsibilities:
- System lifecycle management
- Event distribution
- Frame timing and delta time calculation
- Scene management

Design Pattern: Facade Pattern
The Engine class provides a simplified interface to the complex subsystem interactions.

GameObject System
-----------------
The GameObject system uses a hierarchical entity structure:

GameObject (Base Entity)
├── Transform Component (built-in)
├── Child GameObjects (hierarchy)
└── Tags (categorization)

Design Patterns Used:
- Composite Pattern: For parent-child hierarchies
- Component Pattern: Transform as built-in component
- Observer Pattern: For parent-child notifications

Scene Management
---------------
Scenes organize GameObjects and provide lifecycle management:

Scene Lifecycle:
1. on_enter() - Scene activation
2. update() - Per-frame logic
3. render() - Per-frame rendering
4. on_exit() - Scene deactivation

Design Pattern: State Pattern
Scenes represent different game states (menu, gameplay, pause, etc.)

SUBSYSTEM ARCHITECTURE
=====================

Graphics Subsystem
------------------
Components:
- Renderer: Core drawing operations
- Sprite: Visual GameObject representation  
- Camera: View transformation
- Color utilities

Architecture:
